From 300baa08f5e9d81d821b7923334068ed7a752680 Mon Sep 17 00:00:00 2001
From: Kislay Raj <kislaykishu@gmail.com>
Date: Mon, 11 May 2020 01:59:27 +0530
Subject: [PATCH] Create Patch File

---
 __pycache__/client3.cpython-37.pyc | Bin 0 -> 1046 bytes
 client3.py                         |  59 ++-----
 client_test.py                     | 240 ++++++++++++++++++++++++++++-
 3 files changed, 249 insertions(+), 50 deletions(-)
 create mode 100644 __pycache__/client3.cpython-37.pyc

diff --git a/__pycache__/client3.cpython-37.pyc b/__pycache__/client3.cpython-37.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..1cc439dd9c3c047f58783a45803fcb6c1110cb3c
GIT binary patch
literal 1046
zcmYjQ&2Q5%6t@#6O}BQyz6+OfKv0RXAuiK2V6edfiE4ll!YYKUe%nIRq_aI~8`-HG
z`5)+x{0ICM960*Qi907wJi82G>wVcT@8kEJhxPgd!L|SH>)X#hAwR5fzN)BfAgS-j
z1Q9eNoI2@o&q<&APBPAf#{=Q>P%sgEB)lR*Q9&6&RYW~cemnXE6EF$kkPhh<c~kNl
z_@g?|_fw+_5R5JY8?iHTM$hQzl9hZqC4A;+6{gX9h0j6-W{0%H_#B_-3w#k4VFu>b
z2{c3%=3pKcU~!ktlOd(#pnPS|Cm@0uG1(x<YYj5={@%7<VJ|O8tNs)FBJGo_`&tjy
zmY1`ln`HZi(rc?Lt1HU~haivdr{eC1)ASc5q>JQMfSe(1BB>2zCB|!zQ>v}zHHh#r
z8$I=$&HmYb>6QKh5y2I5%1UajlI=3ABy5{N>7v^+6<rMCom7}$Ak!|4?L_r{dYGq0
zO|Y94iEafZI5;dcNPBFm_(44OucGf*mA1q$L{6gk{bX~k^HPCSonET4q_YL8hnYH0
zwx1SqFUhUa)c9@lwpBNmG<5fu?7`CQrR~>uI^8UVT;I7hI5xFC&|8U4wu>~^HH@y@
z6QU8lh`UB*9nZS9FuSa@<iMImrKE!5gQyAe0^us@6_hQnEiJmP*p|mDu9-MFS9aXR
znAwab!Wy0@IxS|<QXw*e`5Bc{?lzA5Nt(y;$@OOzCDFX5nu%`SK%CaDshdsg%So38
zwbn`GqM@JhA3WSN{??<%t;>AsP-a=Wb4vm~2Bmp8whhy1A2@rjikycs$wkrU!Lyf-
zp1(G<?fU;$NS^c|jtxt3SSCQ<Juoyj0gh29UOA6k!N|n`aue<rvY%+fBqYLwZpzAp
zu2Ll<Y|qVH+MiQe;N6_vbIJ98Fxj!oF;?sSLL6pr&mydv$RflFx6gd$MU^Os=rnC2
LdJ{Omh%VAUD3=0s

literal 0
HcmV?d00001

diff --git a/client3.py b/client3.py
index f1771c3..e152e2d 100644
--- a/client3.py
+++ b/client3.py
@@ -1,23 +1,3 @@
-################################################################################
-#
-#  Permission is hereby granted, free of charge, to any person obtaining a
-#  copy of this software and associated documentation files (the "Software"),
-#  to deal in the Software without restriction, including without limitation
-#  the rights to use, copy, modify, merge, publish, distribute, sublicense,
-#  and/or sell copies of the Software, and to permit persons to whom the
-#  Software is furnished to do so, subject to the following conditions:
-#
-#  The above copyright notice and this permission notice shall be included in
-#  all copies or substantial portions of the Software.
-#
-#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-#  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
-#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
-#  DEALINGS IN THE SOFTWARE.
-
 import urllib.request
 import time
 import json
@@ -30,30 +10,23 @@ QUERY = "http://localhost:8080/query?id={}"
 N = 500
 
 def getDataPoint(quote):
-	""" Produce all of the needed values to generate a datapoint """
-	""" ------------- Update this function ------------- """
-	stock = quote['stock']
-	bid_price = float(quote['top_bid']['price'])
-	ask_price = float(quote['top_ask']['price'])
-	price = bid_price
-	return stock, bid_price, ask_price, price
+  stock = quote['stock']
+  bid_price = float(quote['top_bid']['price'])
+  ask_price = float(quote['top_ask']['price'])
+  price = (bid_price + ask_price)/2
+  return stock, bid_price, ask_price, price
 
 def getRatio(price_a, price_b):
-	""" Get ratio of price_a and price_b """
-	""" ------------- Update this function ------------- """
-	""" Also create some unit tests for this function in client_test.py """
-	return 1
+  if(price_b==0):
+    return
+  return price_a/price_b
 
-# Main
 if __name__ == "__main__":
-
-	# Query the price once every N seconds.
-	for _ in iter(range(N)):
-		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
-
-		""" ----------- Update to get the ratio --------------- """
-		for quote in quotes:
-			stock, bid_price, ask_price, price = getDataPoint(quote)
-			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
-
-		print ("Ratio %s" % getRatio(price, price))
+  for _ in iter(range(N)):
+    quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
+    prices={}
+    for quote in quotes:
+      stock, bid_price, ask_price, price = getDataPoint(quote)
+      prices[stock]=price
+      print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+    print ("Ratio %s" % (getRatio(prices['ABC'], prices['DEF'])))
diff --git a/client_test.py b/client_test.py
index af2bf26..05792cd 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,25 +1,251 @@
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint, getRatio
 
 class ClientTest(unittest.TestCase):
   def test_getDataPoint_calculatePrice(self):
     quotes = [
       {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 11.2, 'size': 76}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 12, 'size': 89}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 221.2, 'size': 26}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 221.3, 'size': 89}, 'id': '0.109974697771', 'stock': 'DEF'},
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
-    """ ------------ Add the assertion below ------------ """
+    
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price']+quote['top_ask']['price'])/2))
+
+
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
-      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+      {'top_ask': {'price': 119.95, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 19.2, 'size': 64}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 19.3, 'size': 79}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 121.68, 'size': 74}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 127.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price']+quote['top_ask']['price'])/2))
+
+
+
+  def test_getDataPoint_calculatePriceAskGreaterThanBid(self):
+    quotes = [
+      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 115.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 19.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 19.25, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 5.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 4.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price']+quote['top_ask']['price'])/2))
+
+
+
+  def test_getDataPoint_calculatePriceAskZero(self):
+    quotes = [
+      {'top_ask': {'price': 0.0, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 1.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 0.0, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 0.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 0, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 1.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price']+quote['top_ask']['price'])/2))
+
+
+  def test_getDataPoint_calculatePriceAlmostZero(self):
+    quotes = [
+      {'top_ask': {'price': 0.2, 'size': 56}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 0.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 0.120, 'size': 56}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 0.20, 'size': 109}, 'id': '0.109974697771', 'stock': 'DEF'},
+      {'top_ask': {'price': 1.120, 'size': 76}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 0.20, 'size': 59}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 0.190, 'size': 74}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 1.170, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price']+quote['top_ask']['price'])/2))
+
+
+
+  def test_getDataPoint_calculatePriceBidZero(self):
+    quotes = [
+      {'top_ask': {'price': 1.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 0.0, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 2.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 0.0, 'size': 109}, 'id': '0.109974697771', 'stock': 'DEF'},
+      {'top_ask': {'price': 2.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 0.0, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price']+quote['top_ask']['price'])/2))
+
+
+
+  def test_getDataPoint_calculatePriceAskEqualsBid(self):
+    quotes = [
+      {'top_ask': {'price': 119.25, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 119.25, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 259.25, 'size': 86}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 259.25, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 7, 'size': 78}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 7, 'size': 19}, 'id': '0.109974697771', 'stock': 'DEF'},
+      {'top_ask': {'price': 0.0, 'size': 58}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 0.0, 'size': 69}, 'id': '0.109974697771', 'stock': 'DEF'},
+      {'top_ask': {'price': 65, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 65, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price']+quote['top_ask']['price'])/2))
+
+
+
+  def test_getDataPoint_calculatePriceBigDifference(self):
+    quotes = [
+      {'top_ask': {'price': 120.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 125.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 1.25, 'size': 56}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 2.48, 'size': 49}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 12.2, 'size': 15}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 18.48, 'size': 10}, 'id': '0.109974697771', 'stock': 'DEF'},
+      {'top_ask': {'price': 140.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 131.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price']+quote['top_ask']['price'])/2))
+
+
+  def test_getDataPoint_calculatePriceSmallDifference(self):
+    quotes = [
+      {'top_ask': {'price': 120.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.25, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 1.25, 'size': 56}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 1.4, 'size': 49}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 12.25, 'size': 15}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 12.20, 'size': 10}, 'id': '0.109974697771', 'stock': 'DEF'},
+      {'top_ask': {'price': 140.68, 'size': 74}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 140.75, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price']+quote['top_ask']['price'])/2))
+    
+
+
+  def test_getRatio_(self):
+    quotes = [
+      {'top_ask': {'price': 120.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.25, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 12.25, 'size': 15}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 12.20, 'size': 10}, 'id': '0.109974697771', 'stock': 'DEF'},
+      {'top_ask': {'price': 1.25, 'size': 56}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 1.4, 'size': 49}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 140.68, 'size': 74}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 140.75, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    prices={}
+    prices['ABC']=(quotes[0]['top_ask']['price']+quotes[0]['top_bid']['price'])/2    #Initializing Opening Price of Stock ABC
+    prices['DEF']=(quotes[1]['top_ask']['price']+quotes[0]['top_bid']['price'])/2    #Initializing Opening Price of Stock DEF
+    
+    for quote in quotes:
+      stock, bid_price, ask_price, price = getDataPoint(quote)
+      prices[stock]=price    #Price being updated
+      self.assertEqual(getRatio(prices['ABC'], prices['DEF']), (prices['ABC']/prices['DEF']))
+
+  def test_getRatio_RatioOne(self):
+    quotes = [
+      {'top_ask': {'price': 119.25, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 119.25, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 259.25, 'size': 86}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 259.25, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 7, 'size': 78}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 7, 'size': 19}, 'id': '0.109974697771', 'stock': 'DEF'},
+      {'top_ask': {'price': 0.0, 'size': 58}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 0.0, 'size': 69}, 'id': '0.109974697771', 'stock': 'DEF'},
+      {'top_ask': {'price': 65, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 65, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    prices={}
+
+    prices['ABC']=(quotes[0]['top_ask']['price']+quotes[0]['top_bid']['price'])/2    #Initializing Opening Price of Stock ABC
+    prices['DEF']=(quotes[2]['top_ask']['price']+quotes[0]['top_bid']['price'])/2    #Initializing Opening Price of Stock DEF
+    
+    for quote in quotes:
+      stock, bid_price, ask_price, price = getDataPoint(quote)
+      prices[stock]=price    #Price being updated
+      if(prices['DEF'] != 0.0):
+        ans=(prices['ABC']/prices['DEF'])
+        self.assertEqual(getRatio(prices['ABC'], prices['DEF']), ans)
+      else:
+        continue
+
+
+  def test_getRatio_RatioGreaterThanOne(self):
+    quotes = [
+      {'top_ask': {'price': 119.25, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 119.25, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 259.25, 'size': 16}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 259.25, 'size': 19}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 115.25, 'size': 78}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.15, 'size': 19}, 'id': '0.109974697771', 'stock': 'DEF'},
+      {'top_ask': {'price': 0.0, 'size': 58}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 0.0, 'size': 69}, 'id': '0.109974697771', 'stock': 'DEF'},
+      {'top_ask': {'price': 6.5, 'size': 44}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 6.65, 'size': 51}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    prices={}
+
+    prices['ABC']=(quotes[0]['top_ask']['price']+quotes[0]['top_bid']['price'])/2     #Initializing Opening Price of Stock ABC
+    prices['DEF']=(quotes[2]['top_ask']['price']+quotes[0]['top_bid']['price'])/2     #Initializing Opening Price of Stock DEF
+    
+    for quote in quotes:
+      stock, bid_price, ask_price, price = getDataPoint(quote)
+      prices[stock]=price    #Price being updated
+      if(prices['DEF'] != 0.0):
+        ans=(prices['ABC']/prices['DEF'])
+        self.assertEqual(getRatio(prices['ABC'], prices['DEF']), ans)
+      else:
+        continue
+
+
+  def test_getRatio_RatioLessThanOne(self):
+    quotes = [
+      {'top_ask': {'price': 119.25, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 119.25, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 2.95, 'size': 16}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 3.5, 'size': 19}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 265.25, 'size': 88}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 264.15, 'size': 99}, 'id': '0.109974697771', 'stock': 'DEF'},
+      {'top_ask': {'price': 10.50, 'size': 58}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 11.0, 'size': 69}, 'id': '0.109974697771', 'stock': 'DEF'},
+      {'top_ask': {'price': 6.5, 'size': 44}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 6.65, 'size': 51}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    prices={}
+
+    prices['ABC']=(quotes[0]['top_ask']['price']+quotes[0]['top_bid']['price'])/2     #Initializing Opening Price of Stock ABC
+    prices['DEF']=(quotes[2]['top_ask']['price']+quotes[0]['top_bid']['price'])/2     #Initializing Opening Price of Stock DEF
+    
+    for quote in quotes:
+      stock, bid_price, ask_price, price = getDataPoint(quote)
+      prices[stock]=price    #Price being updated
+      if(prices['DEF'] != 0.0):
+        ans=(prices['ABC']/prices['DEF'])
+        self.assertEqual(getRatio(prices['ABC'], prices['DEF']), ans)
+      else:
+        continue
+
+
+  def test_getRatio_RatioAtleastOnePriceZero(self):
+    quotes = [
+      {'top_ask': {'price': 119.25, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 119.25, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 0.0, 'size': 16}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 0.0, 'size': 19}, 'id': '0.109974697771', 'stock': 'DEF'},
+      {'top_ask': {'price': 0.0, 'size': 78}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 0.0, 'size': 19}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 2.50, 'size': 58}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 3.0, 'size': 69}, 'id': '0.109974697771', 'stock': 'DEF'},
+      {'top_ask': {'price': 0.0, 'size': 44}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 0.0, 'size': 51}, 'id': '0.109974697771', 'stock': 'ABC'}
+    ]
+    prices={}
+
+    prices['ABC']=(quotes[0]['top_ask']['price']+quotes[0]['top_bid']['price'])/2     #Initializing Opening Price of Stock ABC
+    prices['DEF']=(quotes[1]['top_ask']['price']+quotes[0]['top_bid']['price'])/2     #Initializing Opening Price of Stock DEF
+    
+    for quote in quotes:
+      stock, bid_price, ask_price, price = getDataPoint(quote)
+      prices[stock]=price    #Price being updated
+      if(prices['DEF'] != 0.0):
+        ans=(prices['ABC']/prices['DEF'])
+        self.assertEqual(getRatio(prices['ABC'], prices['DEF']), ans)
+      else:
+        continue
+
+
+  def test_getRatio_RatioBigSmallDifference(self):
+    quotes = [
+      {'top_ask': {'price': 119.25, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 119.25, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 2.95, 'size': 16}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 3.5, 'size': 19}, 'id': '0.109974697771', 'stock': 'DEF'},
+      {'top_ask': {'price': 119.25, 'size': 88}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 119.50, 'size': 99}, 'id': '0.109974697771', 'stock': 'DEF'},
+      {'top_ask': {'price': 10.50, 'size': 58}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 11.0, 'size': 69}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 6.5, 'size': 44}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 6.65, 'size': 51}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
-    """ ------------ Add the assertion below ------------ """
+    prices={}
 
+    prices['ABC']=(quotes[0]['top_ask']['price']+quotes[0]['top_bid']['price'])/2     #Initializing Opening Price of Stock ABC
+    prices['DEF']=(quotes[1]['top_ask']['price']+quotes[0]['top_bid']['price'])/2     #Initializing Opening Price of Stock DEF
+    
+    for quote in quotes:
+      stock, bid_price, ask_price, price = getDataPoint(quote)
+      prices[stock]=price    #Price being updated
+      if(prices['DEF'] != 0.0):
+        ans=(prices['ABC']/prices['DEF'])
+        self.assertEqual(getRatio(prices['ABC'], prices['DEF']), ans)
+      else:
+        continue
 
-  """ ------------ Add more unit tests ------------ """
 
 
 
 if __name__ == '__main__':
-    unittest.main()
+  unittest.main() 
-- 
2.22.0.windows.1

